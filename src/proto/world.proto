syntax = "proto3";

package TbotsProto;

import "proto/game_state.proto";
import "proto/team.proto";
import "proto/vision.proto";
import "proto/geometry.proto";
import "proto/ball.proto";
import "proto/tbots_timestamp_msg.proto";

message Field
{
     double field_x_length       = 1;
     double field_y_length       = 2;
     double defense_x_length     = 3;
     double defense_y_length     = 4;
     double goal_x_length        = 5;
     double goal_y_length        = 6;
     double boundary_buffer_size = 7;
     double center_circle_radius = 8;
}

message World
{
     Timestamp time_sent  = 1;
     Field field          = 2;
     Team friendly_team   = 3;
     Team enemy_team      = 4;
     Ball ball            = 5;
     GameState game_state = 6;
}

enum FieldType
{
    DIV_A = 0;
    DIV_B = 1;
}

message WorldState
{
    map<uint32, RobotState> blue_robots   = 1;
    map<uint32, RobotState> yellow_robots = 2;
    optional BallState ball_state         = 3;
}

message SimulatorTick
{
     double milliseconds = 1;
}

message Pass
{
    // The location of the passer
     Point passer_point = 1;

    // The location of the receiver
     Point receiver_point = 2;

    // The speed of the pass in meters/second
     double pass_speed_m_per_s = 3;
}

message Shot
{
     Point point = 1;
     Angle angle = 2;
}

message EnemyThreat
{
    // The enemy robot
     Robot robot = 1;

    // Whether or not this robot has possession of the ball
     bool has_ball = 2;

    // How much of the goal the enemy robot can see
    // This does not account for obstacles
    // For example, robots in the corner would have a very small angle
    // while robots directly in front of the net would have a large angle
     Angle goal_angle = 3;

    // The largest angle the robot has to shoot on the friendly net, taking obstacles
    // into account
    optional Angle best_shot_angle = 4;

    // The target the robot would shoot at
    optional Point best_shot_target = 5;

    // How many passes it would take for this robot to get the ball
    // 0 - The robot already has the ball
    // 1 - The robot needs 1 pass to get the ball
    // 2 - ...etc
     int32 num_passes_to_get_possession = 6;

    // The robot that would pass to this robot if necessary
    optional Robot passer = 7;
}
