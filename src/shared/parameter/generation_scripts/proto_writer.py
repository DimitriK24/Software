from cpp_source_config import CppSourceConfig
from cpp_header_config import CppHeaderConfig
from cpp_parameter import CppParameter
import type_map
from typing import List
from dynamic_parameter_schema import PARAMETER_KEY, INCLUDE_KEY
from case_conversion import to_pascal_case
import networkx as nx

#######################################################################
#                             Proto Writer                            #
#######################################################################

AUTOGEN_WARNING = """
/**
 *  !! WARNING !!
 *
 *  THIS FILE IS AUTOGENERATED, ANY CHANGES MADE WILL BE LOST
 *
 *  !! WARNING !!
 */
"""

CONFIG_PROTO = (
    "{autogen_warning}"
    'syntax = "proto3";\n'
    'import "google/protobuf/any.proto";\n'
    "package TbotsProto;\n"
    "{contents}"
)

PROTO_MESSAGE_DEFINITION = "message {name} {{\n" "{contents}" "}}\n\n"

PROTO_PARAM_ENTRY = (
    "{type} {name} = {count_0};\n"
    "message {name}_range {{\n"
    "{type} min_value = {count_1};\n"
    "{type} max_value = {count_2};\n"
    "}}\n"
    "message {name}_options {{\n"
    "repeated {type} allowed_values = {count_3};\n"
    "}}\n"
    "oneof {name}_allowed_values {{\n"
    "{name}_range {name}_allowed_range = {count_4};\n"
    "{name}_options {name}_allowed_options = {count_5};\n"
    "}}\n"
)


PROTO_CONFIG_ENTRY = "google.protobuf.Any {name} = {count};\n"


class ProtoWriter(object):
    @staticmethod
    def write_config_metadata_proto(
        output_proto: str, top_level_proto: str, config_metadata: dict,
    ):
        """Generates the .proto file contain all the protobuf representations
        of all dynamic parameter configs.

        :param output_proto: the name of the proto
        :param top_level_proto: the top level proto name
        :param config_metadata: the dictionary containing the config metadata

        """
        output_proto_contents = ""
        list_of_includes = []

        for config, config_definition in config_metadata.items():
            message_contents = ""
            field_number_count = 1
            name = to_pascal_case(config.split(".")[0])
            list_of_includes.append(config)

            # generate includes
            if "include" in config_definition:
                for included_config in config_definition["include"]:

                    # There is no way to forward declare messages in proto
                    # so lets make use of google.protobuf.Any to store nested
                    # configs
                    #
                    # Since we are autogenerating, we should know which index
                    # corresponds to which type
                    message_contents += PROTO_CONFIG_ENTRY.format(
                        name=included_config.split(".")[0], count=field_number_count
                    )
                    field_number_count += 1

            # generate parameters
            if "parameters" in config_definition:
                for param_entry in config_definition["parameters"]:
                    for param_type, param_definition in param_entry.items():

                        protobuf_field_numbers = {
                            "count_{}".format(x): x + field_number_count
                            for x in range(6)
                        }

                        message_contents += "".join(
                            PROTO_PARAM_ENTRY.format(
                                type=type_map.PROTO_TYPE_MAP[param_type],
                                name=param_definition["name"],
                                **protobuf_field_numbers,
                            )
                        )
                        field_number_count += 6

            # append to output
            output_proto_contents += PROTO_MESSAGE_DEFINITION.format(
                name=name, contents=message_contents,
            )

        # make the top level config
        top_level_config_contents = ""
        field_number_count = 1

        for include in list(set(list_of_includes)):
            top_level_config_contents += PROTO_CONFIG_ENTRY.format(
                name=include.split(".")[0], count=field_number_count
            )
            field_number_count += 1

        output_proto_contents += PROTO_MESSAGE_DEFINITION.format(
            name=top_level_proto, contents=top_level_config_contents
        )

        # write the output
        with open(f"{output_proto}", "w") as proto_file:
            proto_file.write(
                CONFIG_PROTO.format(
                    autogen_warning=AUTOGEN_WARNING, contents=output_proto_contents,
                )
            )
